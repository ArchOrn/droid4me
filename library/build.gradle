apply plugin: "com.android.library"
//apply plugin: "com.jfrog.bintray"
apply plugin: "maven"
apply plugin: "maven-publish"

ext
{
  appCompatVersion = "25.4.0"
}

android
{
  compileSdkVersion 25
  buildToolsVersion '26.0.2'

  defaultConfig
  {
    minSdkVersion 9
    targetSdkVersion 25

    versionCode 20
    versionName "2.5.4-SNAPSHOT"
  }

  buildTypes
  {
    release
    {
      minifyEnabled false
      zipAlignEnabled true
      proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
    }
  }
}

dependencies
{
  //Android
  compile("com.android.support:appcompat-v7:$appCompatVersion")
  compile("com.android.support:preference-v7:$appCompatVersion")

  testCompile("junit:junit:4.0")
  testCompile("org.json:json:20090211")
}

task sourcesJar(type: Jar) {
  classifier = "sources"
  from android.sourceSets.main.java.srcDirs
}

task javadoc(type: Javadoc) {
  title = "droid4me API"
  description "Javadoc for the droid4me framework"
  source = android.sourceSets.main.java.srcDirs
  excludes = ["com/smartnsoft/droid4me/log/Log4JLogger.java", "com/smartnsoft/droid4me/support/v4/app", "com/smartnsoft/droid4me/support/v7/app"]

  options.charSet = "UTF-8"
  options.overview = "src/main/javadoc/overview.html"
  options.links = ["http://docs.oracle.com/javase/7/docs/api/", "http://d.android.com/reference/"]

  classpath += project.files(project.android.getBootClasspath().join(File.pathSeparator))
  failOnError = false
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = "javadoc"
  from javadoc.destinationDir
  // options.encoding = 'UTF-8'
}

artifacts
{
  archives javadocJar
  archives sourcesJar
}

def pomConfig = {
  licenses
  {
    license
    {
      name "GNU Library Public License version 2.1"
      url "https://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt"
      distribution "repo"
    }
  }
}

publishing
{
  publications
  {
    ReleasePublication(MavenPublication)
    {
      artifact sourcesJar
      artifact javadocJar
      groupId "com.smartnsoft"
      artifactId "droid4me"
      version android.defaultConfig.versionName

      pom.withXml
      {
        def root = asNode()
        root.appendNode("description", "droid4me is a framework library dedicated to the development of Android applications")
        root.appendNode("name", "droid4me")
        root.appendNode("url", "https://github.com/smartnsoft/droid4me")
        root.children().last() + pomConfig
      }
    }
  }
}

//https://gist.github.com/bugs84/b7887fb5d7f9f2d484b8
publishing.publications.all
{
  pom.withXml
  {
    asNode().dependencies."*".findAll()
    {
      it.scope.text() == "runtime" && project.configurations.compile.allDependencies.find { dep ->
        dep.name == it.artifactId.text()
      }
    }.each
    {
      it.scope*.value = "compile"
    }
  }
}

//bintray
//{
//  user = bintrayUsername
//  key = bintrayKey
//
//  publications = ["ReleasePublication"]
//
//  pkg
//  {
//    repo = "maven"
//    name = "droid4me"
//    userOrg = "smartnsoft"
//    licenses = ["LGPL-2.1"]
//    vcsUrl = "https://github.com/smartnsoft/droid4me.git"
//    publish = true
//
//    version
//    {
//      name = android.defaultConfig.versionName
//      desc = "droid4me is a framework library dedicated to the development of Android applications"
//      released = new Date()
//      vcsTag = "droid4me-" + android.defaultConfig.versionName
//    }
//  }
//}

uploadArchives
{
  repositories
  {
    mavenDeployer
    {
      repository(url: "https://api.bintray.com/maven/smartnsoft/maven/droid4me/;publish=1")
      {
        authentication(userName: bintrayUsername, password: bintrayKey)
      }

      snapshotRepository(url: nexusSnapshotUrl)
      {
        authentication(userName: nexusUsername, password: nexusPassword)
      }

      pom.project
      {
        name "droid4me"
        groupId "com.smartnsoft"
        artifactId "droid4me"
        version android.defaultConfig.versionName
        packaging "aar"
      }
    }
  }
}
