When it comes to exceptions in an Android application, it may become very tedious and cumbersome to systematically handle them properly. Very often, it ends up in swallowing those exception silently, because it takes too much time to investigate for its cause and display the right user interface (Toast, Dialog). However, the quality of software significantly depends on the way exceptions are handled: good programmers know that, and they also know that handling properly exceptions takes time and prompts them to define consistent policies. 

The typical case are exceptions raised due to bad network connectivity: everytime a web service service is invoked, that kind of exception may be thrown, and if you want to provide a descent end-user experience, you ought to handle them properly, and not just ignoring them.

Since Android does not offer that kind of feature natively, that's where the "ExceptionHandler" comes in hand: it has been designed for enabling to centralize in a single place all exceptions thrown by an Android application. Whatever the piece of code which causes the exception to be triggered, the ExceptionHandler will be invoked for letting you handle the exception. The main places where exceptions are thrown is while retrieving business objects, and performing web service requests in a detached thread.

In order to benefit the "ExceptionHandler" component, you need to follow the following steps:
1. you just need to declare one in the "ActivityController" though the "registerExceptionHandler()" method.